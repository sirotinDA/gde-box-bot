from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.db import DB_PATH
import aiosqlite

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
class RemoveItemState(StatesGroup):
    waiting_for_item_name = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
box_ids = {}

# –®–∞–≥ 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –≤–µ—â—å"
async def handle_remove_item_button(callback: types.CallbackQuery, state: FSMContext):
    box_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    box_ids[user_id] = box_id

    await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é –≤–µ—â—å —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–æ–±–∫–∏.")
    await RemoveItemState.waiting_for_item_name.set()
    await callback.answer()

# –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏
async def handle_item_name_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    item = message.text.strip().lower()

    box_id = box_ids.get(user_id)
    if not box_id:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É.")
        await state.finish()
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT description FROM boxes WHERE id = ?", (box_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                await message.answer("‚ùå –ö–æ—Ä–æ–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.finish()
                return

            items = [i.strip() for i in row[0].split(",")]
            lowered = [i.lower() for i in items]

            if item not in lowered:
                await message.answer("‚ùó –¢–∞–∫–æ–π –≤–µ—â–∏ –Ω–µ—Ç –≤ —ç—Ç–æ–π –∫–æ—Ä–æ–±–∫–µ.")
                await state.finish()
                return

            new_items = [i for i in items if i.lower() != item]

            async with db.cursor() as cur:
                if new_items:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    new_desc = ", ".join(new_items)
                    await cur.execute("UPDATE boxes SET description = ? WHERE id = ?", (new_desc, box_id))
                    await message.answer(f"‚úÖ –í–µ—â—å \"{item}\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–æ–±–∫–∏.")
                else:
                    # –£–¥–∞–ª—è–µ–º –∫–æ—Ä–æ–±–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    await cur.execute("DELETE FROM boxes WHERE id = ?", (box_id,))
                    await message.answer("üóë –ö–æ—Ä–æ–±–∫–∞ –±—ã–ª–∞ –ø—É—Å—Ç–æ–π –∏ —É–¥–∞–ª–µ–Ω–∞ —Ü–µ–ª–∏–∫–æ–º.")

                await db.commit()

    await message.answer(f"‚úÖ –í–µ—â—å \"{item}\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–æ–±–∫–∏.")
    await state.finish()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register(dp: Dispatcher):
    dp.register_callback_query_handler(handle_remove_item_button, lambda c: c.data.startswith("remove_item_from:"), state="*")
    dp.register_message_handler(handle_item_name_input, state=RemoveItemState.waiting_for_item_name)
