from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher import Dispatcher
from states import AddBox
from datetime import datetime
import aiosqlite
from database.db import DB_PATH

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_keyboard.add("üì¶ –ú–æ–∏ –∫–æ—Ä–æ–±–∫–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É")
main_menu_keyboard.add("üìç –ú–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è", "üîç –ü–æ–∏—Å–∫")
main_menu_keyboard.add("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É")

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
cancel_keyboard.add("‚¨Ö –ù–∞–∑–∞–¥")

# –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏
async def start_add(message: types.Message, state: FSMContext):
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ –∫–æ—Ä–æ–±–∫–∏*", parse_mode="Markdown", reply_markup=cancel_keyboard)
    await AddBox.waiting_for_photo.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùó –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ –∫–æ—Ä–æ–±–∫–∏*", parse_mode="Markdown", reply_markup=cancel_keyboard)
        return
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏, *—á—Ç–æ –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–æ–±–∫–µ*\n\n_–ü—Ä–∏–º–µ—Ä:_ –®—É—Ä—É–ø–æ–≤—ë—Ä—Ç, –∫–∞–±–µ–ª—å, –ø–µ—Ä—á–∞—Ç–∫–∏",
        parse_mode="Markdown", reply_markup=cancel_keyboard
    )
    await AddBox.waiting_for_description.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
async def handle_description(message: types.Message, state: FSMContext):
    desc = message.text.strip()
    if not desc:
        await message.answer("‚ùó –û–ø–∏—à–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞–º–∏", parse_mode="Markdown", reply_markup=cancel_keyboard)
        return
    await state.update_data(description=desc)
    await message.answer(
        "üìç –ù–∞–ø–∏—à–∏ *–º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è* –∫–æ—Ä–æ–±–∫–∏\n\n_–ü—Ä–∏–º–µ—Ä:_ –ì–∞—Ä–∞–∂, –ö–ª–∞–¥–æ–≤–∫–∞, –ë–∞–ª–∫–æ–Ω",
        parse_mode="Markdown", reply_markup=cancel_keyboard
    )
    await AddBox.waiting_for_location.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
async def handle_location(message: types.Message, state: FSMContext):
    location = message.text.strip().capitalize()
    user_id = message.from_user.id
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO boxes (user_id, photo, description, location, created_at)
            VALUES (?, ?, ?, ?, ?)
        """, (
            user_id,
            data["photo"],
            data["description"],
            location,
            datetime.now().isoformat()
        ))
        await db.commit()

    await message.answer(
        f"‚úÖ *–ö–æ—Ä–æ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n"
        f"üìç –ú–µ—Å—Ç–æ: `{location}`\n"
        f"üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: `{data['description']}`\n\n"
        f"_–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏: –Ω–∞–∂–º–∏ ¬´üì¶ –ú–æ–∏ –∫–æ—Ä–æ–±–∫–∏¬ª_",
        parse_mode="Markdown",
        reply_markup=main_menu_keyboard
    )
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def handle_back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register(dp: Dispatcher):
    dp.register_message_handler(start_add, Command("add"))
    dp.register_message_handler(start_add, Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É"), state=None)
    dp.register_message_handler(handle_back, Text(equals="‚¨Ö –ù–∞–∑–∞–¥"), state="*")
    dp.register_message_handler(handle_photo, content_types=types.ContentType.PHOTO, state=AddBox.waiting_for_photo)
    dp.register_message_handler(handle_description, state=AddBox.waiting_for_description)
    dp.register_message_handler(handle_location, state=AddBox.waiting_for_location)
