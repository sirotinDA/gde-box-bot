from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.dispatcher.filters import Text
from states import SearchState, AddBox
from database.db import DB_PATH
import aiosqlite
from datetime import datetime
from handlers import find_box
from handlers.keyboards import main_menu_keyboard, cancel_keyboard, photo_keyboard

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∏
main_menu_keyboard = main_menu_keyboard
cancel_keyboard = cancel_keyboard

# –ö–Ω–æ–ø–∫–∏: —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def button_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip().lower()

    if "—É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É" in text or "–º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è" in text:
        locations = {}
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT location FROM boxes WHERE user_id = ?", (user_id,)) as cursor:
                async for row in cursor:
                    loc = row[0]
                    locations[loc] = locations.get(loc, 0) + 1

        if not locations:
            await message.answer("üì≠ *–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.*", parse_mode="Markdown")
            return

        keyboard = types.InlineKeyboardMarkup()
        action = "delete_from" if "—É–¥–∞–ª–∏—Ç—å" in text else "storage"
        for loc, count in locations.items():
            keyboard.add(types.InlineKeyboardButton(text=f"{loc} ({count})", callback_data=f"{action}:{loc}"))

        label = {
            "delete_from": "üóë *–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
            "storage": "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:*"
        }

        await message.answer(label[action], reply_markup=keyboard, parse_mode="Markdown")
        return

    if "–ø–æ–∏—Å–∫" in text:
        await message.answer("üîç *–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:*", reply_markup=cancel_keyboard, parse_mode="Markdown")
        await SearchState.waiting_for_keyword.set()
        return

# –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
async def process_search(message: types.Message, state: FSMContext):
    await find_box.find_box(message)
    await state.finish()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏ ‚Äî –Ω–∞—á–∞–ª–æ
async def start_add_box(message: types.Message, state: FSMContext):
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–æ—Ä–æ–±–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ\"", reply_markup=photo_keyboard)
    await AddBox.waiting_for_photo.set()

async def handle_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–æ–±–∫–µ:\n\n"
        "_–ü–µ—Ä–µ—á–∏—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:_ –æ—Ç–≤–µ—Ä—Ç–∫–∞, —Ñ–æ–Ω–∞—Ä–∏–∫, –±–∞—Ç–∞—Ä–µ–π–∫–∏",
        parse_mode="Markdown",
        reply_markup=cancel_keyboard
    )
    await AddBox.waiting_for_description.set()

async def skip_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo="no_photo.jpg")
    await message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–æ–±–∫–µ:\n\n"
        "_–ü–µ—Ä–µ—á–∏—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:_ –æ—Ç–≤–µ—Ä—Ç–∫–∞, —Ñ–æ–Ω–∞—Ä–∏–∫, –±–∞—Ç–∞—Ä–µ–π–∫–∏",
        parse_mode="Markdown",
        reply_markup=cancel_keyboard
    )
    await AddBox.waiting_for_description.set()


async def handle_description(message: types.Message, state: FSMContext):
    desc = message.text.strip()
    if not desc:
        await message.answer("‚ùó –û–ø–∏—à–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞–º–∏", reply_markup=cancel_keyboard)
        return
    await state.update_data(description=desc)

    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT DISTINCT location FROM boxes WHERE user_id = ?", (user_id,))
        locations = await cursor.fetchall()

    if locations:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        for loc in locations:
            keyboard.insert(types.InlineKeyboardButton(text=loc[0], callback_data=f"select_location:{loc[0]}"))
        keyboard.add(types.InlineKeyboardButton("‚úç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_location"))
        await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ *–º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è* –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.answer(
            "üìç –ù–∞–ø–∏—à–∏ *–º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è* –∫–æ—Ä–æ–±–∫–∏\n\n_–ü—Ä–∏–º–µ—Ä:_ –ì–∞—Ä–∞–∂, –ö–ª–∞–¥–æ–≤–∫–∞, –ë–∞–ª–∫–æ–Ω",
            parse_mode="Markdown", reply_markup=cancel_keyboard
        )

    await AddBox.waiting_for_location.set()

async def manual_location_callback(callback: types.CallbackQuery):
    await callback.message.answer("üìç –ù–∞–ø–∏—à–∏ *–º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è* –∫–æ—Ä–æ–±–∫–∏ –≤—Ä—É—á–Ω—É—é:", parse_mode="Markdown", reply_markup=cancel_keyboard)
    await callback.answer()

async def location_chosen_callback(callback: types.CallbackQuery, state: FSMContext):
    location = callback.data.replace("select_location:", "")
    await state.update_data(selected_location=location)

    from types import SimpleNamespace

    fake_msg = SimpleNamespace(
        from_user=callback.from_user,
        chat=callback.message.chat,
        text=location,
        answer=lambda *args, **kwargs: callback.message.answer(*args, **kwargs)
    )
    await handle_location_inline(fake_msg, state)
    await callback.answer()

async def handle_location_inline(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    photo = data.get("photo")
    description = data.get("description")
    location = message.text.strip().capitalize()

    if not all([photo, description, location]):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=main_menu_keyboard)
        await state.finish()
        return

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO boxes (user_id, photo, description, location, created_at)
            VALUES (?, ?, ?, ?, ?)
        """, (user_id, photo, description, location, datetime.now().isoformat()))
        await db.commit()

    await message.answer("‚úÖ –ö–æ—Ä–æ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu_keyboard)
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–æ–±–∫–∏
async def handle_cancel_add_box(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤

def register(dp: Dispatcher):
    dp.register_message_handler(handle_cancel_add_box, Text(equals="‚¨Ö –ù–∞–∑–∞–¥"), state="*")
    dp.register_message_handler(start_add_box, Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫—É"), state=None)
    dp.register_message_handler(handle_photo, content_types=types.ContentType.PHOTO, state=AddBox.waiting_for_photo)
    dp.register_message_handler(skip_photo, Text(equals="üì∑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"), state=AddBox.waiting_for_photo)
    dp.register_message_handler(handle_description, state=AddBox.waiting_for_description)
    dp.register_message_handler(handle_location_inline, state=AddBox.waiting_for_location)
    dp.register_callback_query_handler(location_chosen_callback, lambda c: c.data.startswith("select_location:"), state=AddBox.waiting_for_location)
    dp.register_callback_query_handler(manual_location_callback, lambda c: c.data == "manual_location", state=AddBox.waiting_for_location)
