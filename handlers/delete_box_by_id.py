from aiogram import types
from aiogram.dispatcher import Dispatcher
from database.db import DB_PATH
import aiosqlite

async def handle_delete_box_by_id(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        box_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùó –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ—Ä–æ–±–∫–∏.")
        await callback.answer()
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id FROM boxes WHERE id = ? AND user_id = ?", (box_id, user_id)) as cursor:
            row = await cursor.fetchone()

        if row:
            await db.execute("DELETE FROM boxes WHERE id = ?", (box_id,))
            await db.commit()

            try:
                await callback.message.delete()
            except Exception as e:
                await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            await callback.message.answer("‚ùå –ö–æ—Ä–æ–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ.")

    await callback.answer()

# üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register(dp: Dispatcher):
    dp.register_callback_query_handler(handle_delete_box_by_id, lambda c: c.data.startswith("delete_box_by_id:"))
