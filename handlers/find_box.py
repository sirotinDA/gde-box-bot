from aiogram import types
from aiogram.dispatcher import Dispatcher
import aiosqlite
from database.db import DB_PATH
from handlers.keyboards import main_menu_keyboard, box_action_keyboard

async def find_box(message: types.Message):
    try:
        user_id = message.from_user.id
        search_query = (message.text or "").strip()

        if not search_query:
            await message.answer(
                "üîç –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å:\n–ü—Ä–∏–º–µ—Ä: <code>–∫–∞–±–µ–ª—å</code>",
                parse_mode="HTML",
                reply_markup=main_menu_keyboard
            )
            return

        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute("""
                SELECT id, photo, description, location 
                FROM boxes 
                WHERE user_id = ? AND description LIKE ?
            """, (user_id, f"%{search_query}%"))

            results = await cursor.fetchall()

        if not results:
            await message.answer(
                f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{search_query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=main_menu_keyboard
            )
            return

        found_msg = await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(results)}", reply_markup=main_menu_keyboard)

        for box in results:
            box_id = box['id']
            description = box['description']
            location = box['location']
            photo = box['photo']

            if photo and isinstance(photo, str) and (photo.endswith(".jpg") or photo.endswith(".png")):
                try:
                    with open(photo, "rb") as f:
                        photo = f.read()
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∑–∞–≥–ª—É—à–∫–∏: {e}")
                    photo = None

            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("‚úè –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"add_item:{box_id}:{found_msg.message_id}"),
                types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–µ—â—å", callback_data=f"remove_item_from:{box_id}"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É", callback_data=f"delete_box_by_id:{box_id}:{found_msg.message_id}")
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å >1 –º–µ—Å—Ç–æ
            async with aiosqlite.connect(DB_PATH) as db_check:
                cursor = await db_check.execute("SELECT DISTINCT location FROM boxes WHERE user_id = ?", (user_id,))
                locations = await cursor.fetchall()
                if len(locations) > 1:
                    keyboard.add(types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–æ–±–∫—É", callback_data=f"move_box:{box_id}"))
                    
            caption = (
                f"üì¶ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {description}\n"
                f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}"
            )

            try:
                if photo:
                    await message.answer_photo(
                        photo=photo,
                        caption=caption,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await message.answer(
                        text=caption,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                await message.answer(
                    "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
                    reply_markup=main_menu_keyboard
                )

    except Exception as e:
        print(f"[FATAL ERROR] –û—à–∏–±–∫–∞ –≤ find_box: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ", reply_markup=main_menu_keyboard)

def register(dp: Dispatcher):
    dp.register_message_handler(find_box, commands=["find"])
