from aiogram import types
from aiogram.dispatcher import Dispatcher
import aiosqlite
from database.db import DB_PATH
from handlers.keyboards import get_main_keyboard
from datetime import datetime

async def list_boxes(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("""
            SELECT id, photo, description, location, created_at 
            FROM boxes WHERE user_id = ?
        """, (user_id,))
        boxes = await cursor.fetchall()

    if not boxes:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.", reply_markup=get_main_keyboard(False))
        return

    for box in boxes:
        box_id = box['id']
        photo = box['photo']
        description = box['description']
        location = box['location']
        created_at = box['created_at']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫—É (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
        if photo and isinstance(photo, str) and (photo.endswith(".jpg") or photo.endswith(".png")):
            try:
                with open(photo, "rb") as f:
                    photo = f.read()
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ: {e}")
                photo = None

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.row(
            types.InlineKeyboardButton("‚úè –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"add_item:{box_id}:0"),
            types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–µ—â—å", callback_data=f"remove_item_from:{box_id}")
        )
        keyboard.row(
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É", callback_data=f"confirm_delete_box:{box_id}")
        )

        date_str = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
        caption = (
            f"üì¶ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {description}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
            f"üóì <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {date_str}"
        )

        try:
            if photo:
                await message.answer_photo(
                    photo=photo,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await message.answer(
                    text=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä–æ–±–∫–∏: {e}")
            await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ—Ä–æ–±–∫—É.", reply_markup=get_main_keyboard(True))

def register(dp: Dispatcher):
    dp.register_message_handler(list_boxes, commands=["list"])
