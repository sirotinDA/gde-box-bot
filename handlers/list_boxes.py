from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from database.db import DB_PATH
import aiosqlite
from datetime import datetime

async def handle_list_boxes(message: types.Message):
    user_id = message.from_user.id
    boxes = []

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
            SELECT id, photo, description, location, created_at
            FROM boxes
            WHERE user_id = ?
            ORDER BY created_at DESC
        """, (user_id,)) as cursor:
            async for row in cursor:
                try:
                    box_id, photo, description, location, created_at = row
                    created_at = datetime.fromisoformat(created_at)
                    boxes.append({
                        "id": box_id,
                        "photo": photo,
                        "description": description,
                        "location": location,
                        "created_at": created_at
                    })
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–¥–Ω–æ–π –∏–∑ –∫–æ—Ä–æ–±–æ–∫: {e}")

    if not boxes:
        await message.answer("üì≠ *–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.*", parse_mode="Markdown")
        return

    await message.answer(f"*üì¶ –í—Å–µ–≥–æ –∫–æ—Ä–æ–±–æ–∫:* `{len(boxes)}`", parse_mode="Markdown")

    for box in boxes:
        try:
            date_str = box["created_at"].strftime("%d.%m.%Y %H:%M")

            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å –≤–µ—â—å", callback_data=f"remove_item_from:{box['id']}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É", callback_data=f"delete_box_by_id:{box['id']}"
                )
            )

            await message.answer_photo(
                box["photo"],
                caption=(
                    f"*üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:* `{box['description']}`\n"
                    f"*üìç –ú–µ—Å—Ç–æ:* `{box['location']}`\n"
                    f"*üóì –î–æ–±–∞–≤–ª–µ–Ω–æ:* `{date_str}`"
                ),
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–æ–±–∫–∏: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
def register(dp: Dispatcher):
    dp.register_message_handler(handle_list_boxes, Text(equals="üì¶ –ú–æ–∏ –∫–æ—Ä–æ–±–∫–∏"))
