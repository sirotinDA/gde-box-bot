from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.dispatcher.filters import Text
from states import SearchState, AddBox, AddItemFromMenu, AddItemToBox
from database.db import DB_PATH
import aiosqlite
from datetime import datetime
from handlers import find_box
from handlers import delete_box_by_id as delete_handlers
from handlers.keyboards import main_menu_keyboard, cancel_keyboard, photo_keyboard

main_menu_keyboard = main_menu_keyboard
cancel_keyboard = cancel_keyboard

async def button_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip().lower()

    if "—É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É" in text or "–º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è" in text:
        locations = {}
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT location FROM boxes WHERE user_id = ?", (user_id,)) as cursor:
                async for row in cursor:
                    loc = row[0]
                    locations[loc] = locations.get(loc, 0) + 1

        if not locations:
            await message.answer("üìú *–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.*", parse_mode="Markdown")
            return

        keyboard = types.InlineKeyboardMarkup()
        action = "delete_from" if "—É–¥–∞–ª–∏—Ç—å" in text else "storage"
        for loc, count in locations.items():
            keyboard.add(types.InlineKeyboardButton(text=f"{loc} ({count})", callback_data=f"{action}:{loc}"))

        label = {
            "delete_from": "üóë *–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
            "storage": "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:*"
        }

        await message.answer(label[action], reply_markup=keyboard, parse_mode="Markdown")
        return

    if "–ø–æ–∏—Å–∫" in text:
        await message.answer("üîç *–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:*", reply_markup=cancel_keyboard, parse_mode="Markdown")
        await SearchState.waiting_for_keyword.set()
        return

    if "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç" in text:
        locations = []
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT DISTINCT location FROM boxes WHERE user_id = ?", (user_id,)) as cursor:
                locations = await cursor.fetchall()

        if not locations:
            await message.answer("üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.", reply_markup=main_menu_keyboard)
            return

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        for (loc,) in locations:
            keyboard.insert(types.InlineKeyboardButton(text=loc, callback_data=f"choose_location_for_add:{loc}"))

        await message.answer("‚úè –í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ—Ä–æ–±–∫–∞:", reply_markup=keyboard)
        await AddItemFromMenu.waiting_for_location.set()

async def process_search(message: types.Message, state: FSMContext):
    await find_box.find_box(message)
    await state.finish()

async def handle_choose_location_for_add(callback: types.CallbackQuery, state: FSMContext):
    location = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, description FROM boxes WHERE user_id = ? AND location = ?", (user_id, location)) as cursor:
            boxes = await cursor.fetchall()

    if not boxes:
        await callback.message.answer("‚ùó –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.", reply_markup=main_menu_keyboard)
        await callback.answer()
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for box_id, desc in boxes:
        short_desc = (desc[:30] + "...") if len(desc) > 30 else desc
        keyboard.add(types.InlineKeyboardButton(text=short_desc, callback_data=f"add_to_box:{box_id}"))

    await callback.message.answer("üì¶ –í—ã–±–µ—Ä–∏ –∫–æ—Ä–æ–±–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=keyboard)
    await callback.answer()

async def handle_add_to_box(callback: types.CallbackQuery, state: FSMContext):
    box_id = int(callback.data.split(":")[1])
    await state.update_data(box_id=box_id)
    await callback.message.answer("‚úç –í–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–æ–±–∫—É:")
    await AddItemToBox.waiting_for_text.set()
    await callback.answer()

async def handle_view_location(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    location = callback.data.replace("storage:", "")

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, description FROM boxes WHERE user_id = ? AND location = ?", (user_id, location)) as cursor:
            boxes = await cursor.fetchall()

    if not boxes:
        await callback.message.answer("üì≠ –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.")
        await callback.answer()
        return

    text = f"üìç <b>{location}</b>\n\n"
    for i, (box_id, desc) in enumerate(boxes, 1):
        text += f"üì¶ <b>{i}:</b> {desc}\n"

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ–±–∫—É", callback_data=f"remove_from_location:{location}"),
        types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ", callback_data=f"confirm_delete_location:{location}")
    )

    await callback.message.answer(text.strip(), parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

async def handle_remove_from_location(callback: types.CallbackQuery, state: FSMContext):
    location = callback.data.replace("remove_from_location:", "")
    user_id = callback.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, description FROM boxes WHERE user_id = ? AND location = ?", (user_id, location)) as cursor:
            boxes = await cursor.fetchall()

    if not boxes:
        await callback.message.answer("üì≠ –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫.")
        await callback.answer()
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for box_id, desc in boxes:
        short = (desc[:30] + "...") if len(desc) > 30 else desc
        keyboard.add(types.InlineKeyboardButton(text=f"‚ùå {short}", callback_data=f"confirm_delete_box:{box_id}"))

    await callback.message.answer("üóë –í—ã–±–µ—Ä–∏ –∫–æ—Ä–æ–±–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

async def confirm_delete_box(callback: types.CallbackQuery):
    box_id = int(callback.data.split(":")[1])

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"delete_box_now:{box_id}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete_box")
    )

    await callback.message.edit_text("‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ—Ä–æ–±–∫—É?", reply_markup=keyboard)
    await callback.answer()

async def delete_box_now(callback: types.CallbackQuery):
    box_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM boxes WHERE id = ? AND user_id = ?", (box_id, user_id))
        await db.commit()

    await callback.message.delete()
    await callback.message.bot.send_message(
        chat_id=callback.from_user.id,
        text="‚úÖ –ö–æ—Ä–æ–±–∫–∞ —É–¥–∞–ª–µ–Ω–∞!"
    )
    await callback.answer()

async def cancel_delete_box(callback: types.CallbackQuery):
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)
    await callback.answer()

async def confirm_delete_location(callback: types.CallbackQuery):
    location = callback.data.replace("confirm_delete_location:", "")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_location:{location}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_location")
    )
    await callback.message.answer(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏ –∏–∑ –º–µ—Å—Ç–∞ ¬´{location}¬ª?", reply_markup=keyboard)
    await callback.answer()

async def handle_delete_location(callback: types.CallbackQuery):
    location = callback.data.replace("delete_location:", "")
    user_id = callback.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM boxes WHERE user_id = ? AND location = ?", (user_id, location))
        await db.commit()

    await callback.message.answer(f"‚úÖ –ú–µ—Å—Ç–æ ¬´{location}¬ª –∏ –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()

async def cancel_delete_location(callback: types.CallbackQuery):
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)
    await callback.answer()

async def do_nothing(callback: types.CallbackQuery):
    await callback.answer()

def register(dp: Dispatcher):
    dp.register_message_handler(button_handler, state=None)
    dp.register_message_handler(process_search, state=SearchState.waiting_for_keyword)
    dp.register_callback_query_handler(handle_choose_location_for_add, lambda c: c.data.startswith("choose_location_for_add:"), state=AddItemFromMenu.waiting_for_location)
    dp.register_callback_query_handler(handle_add_to_box, lambda c: c.data.startswith("add_to_box:"), state="*")
    dp.register_callback_query_handler(handle_view_location, lambda c: c.data.startswith("storage:"), state="*")
    dp.register_callback_query_handler(handle_remove_from_location, lambda c: c.data.startswith("remove_from_location:"), state="*")
    dp.register_callback_query_handler(confirm_delete_box, lambda c: c.data.startswith("confirm_delete_box:"), state="*")
    dp.register_callback_query_handler(delete_box_now, lambda c: c.data.startswith("delete_box_now:"), state="*")
    dp.register_callback_query_handler(cancel_delete_box, lambda c: c.data == "cancel_delete_box", state="*")
    dp.register_callback_query_handler(confirm_delete_location, lambda c: c.data.startswith("confirm_delete_location:"), state="*")
    dp.register_callback_query_handler(handle_delete_location, lambda c: c.data.startswith("delete_location:"), state="*")
    dp.register_callback_query_handler(cancel_delete_location, lambda c: c.data == "cancel_delete_location", state="*")
    dp.register_callback_query_handler(do_nothing, lambda c: c.data == "none", state="*")